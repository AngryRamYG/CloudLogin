@namespace AngryMonkey.Cloud.Login
@using static Microsoft.Extensions.DependencyInjection.CloudLoginConfiguration
@using static Microsoft.AspNetCore.Components.Forms.InputCheckbox;
@inject Microsoft.Extensions.DependencyInjection.CloudLoginService cloudLogin
@inject NavigationManager navigationManager
@inject CloudGeographyClient cloudGeography

<div class="amc-cloudlogin">
    <div class="amc-cloudlogin-header">

        @* Loading *@

        @if (IsLoading)
        {
            <div class="amc-cloudlogin-loading">
                <div></div>
            </div>
        }

        @* Logo *@

        @if (!string.IsNullOrEmpty(Logo))
        {
            <div class="amc-cloudlogin-logo">
                <img src="@Logo" alt="logo" />
            </div>
        }

        @* Title *@

        <div class="amc-cloudlogin-title">

            @if (State != ProcessState.PendingSignIn)
            {
                <button class="--button _back" @onclick="OnBackClicked">
                    <AngryMonkey.Cloud.Components.Icons.Back />
                </button>
            }
            <div>
                @Title
            </div>
        </div>

        @* Subtitle *@

        @if (!string.IsNullOrEmpty(Subtitle))
        {
            <div class="amc-cloudlogin-subtitle">
                @Subtitle
            </div>
        }

        @* Errors *@

        @if (Errors.Any())
        {
            <div class="amc-cloudlogin-errors">
                <ul>
                    @foreach (string error in Errors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }
    </div>

    <div class="amc-cloudlogin-body">

        @if (DisplayInputValue)
        {
            <div class="amc-cloudlogin-panel">
                <div class="amc-cloudlogin-inputdisplay">
                    @InputValue
                </div>

                <div class="amc-cloudlogin-keppsignedin">
                    <input type="checkbox" id="keepme" @bind-value="KeepMeSignedIn">
                    <label for="keepme">Keep me signed in</label>
                </div>
            </div>
        }

        @if (State == ProcessState.PendingSignIn)
        {
            <div class="login-form _center @(checkError? "error" : "")">
                <div class="login-form-email --input">
                    <input type="text" id="email" class=" @(!string.IsNullOrEmpty(InputValue) ? "active": "")" @bind-value="InputValue" @bind-value:event="oninput" spellcheck="false" />
                    <label for="email">
                        @if (InputValueFormat == InputFormat.Other || InputValueFormat == InputFormat.EmailAddress)
                        {
                            <span>Email</span>
                        }
                        @if (InputValueFormat == InputFormat.Other)
                        {
                            <span> or </span>
                        }
                        @if (InputValueFormat == InputFormat.Other || InputValueFormat == InputFormat.PhoneNumber)
                        {
                            <span>Phone number</span>
                        }
                    </label>
                </div>
                <div class="login-form-next ">
                    <button class="--button _primary @(IsLoading? "_loading --disable" : "") @((InputValueFormat == InputFormat.PhoneNumber || (InputValueFormat == InputFormat.EmailAddress))? "" : "--disable" )" @onclick="OnNextClicked">
                        <span>Next</span>
                        <AngryMonkey.Cloud.Components.Icons.LoadingButton view="@(IsLoading ? true : false)" />
                    </button>
                </div>
            </div>
        }
        else if (State == ProcessState.PendingAuthorization)//PendingAuthorization
        {
            <div class="login-form">
                <div class="login-form-provider">
                    @foreach (Provider provider in Providers)
                    {
                        <button class="--button _@provider.Code.ToLower()" @onclick="() => OnProviderClickedAsync(provider)">
                            <span>
                                @provider.Label
                            </span>
                        </button>
                    }
                </div>
            </div>
        }
        else if (State == ProcessState.PendingProviders)
        {
            <div class="login-form">
                <div class="login-form-provider">
                    @foreach (Provider provider in Providers)
                    {
                        <button class="--button _@provider.Code.ToLower()" @onclick="() => OnProviderClickedAsync(provider)">
                            <span>
                                @provider.Label
                            </span>
                        </button>
                    }
                </div>
            </div>

        }
        else if (State == ProcessState.PendingVerification)
        {
            <div class="login-form">
                <div class="login-form-Verification">
                    <span>Please check your emails for a message with your code. Your code is 7 numbers long.</span>
                </div>
                <div class="login-form-error _wrong">
                    @if (WrongCode)
                    {
                        <span>*Wrong code</span>
                    }
                </div>
                <div class="login-form-emailVerification  --input">
                    <input autocomplete="off" type="text" id="code" class=" @(VerificationValue!=""? "active": "")" @bind-value="VerificationValue" @bind-value:event="oninput" spellcheck="false" />
                    <label for="code">Enter Code</label>
                </div>
                <div class="login-form-resend">
                    <button @onclick="OnNewCodeClicked">Resend code ?</button>
                </div>
                <div class="login-form-expire _wrong ">
                    @if (ExpiredCode)
                    {
                        <button class="--button _error" @onclick="OnNewCodeClicked">New Code</button>
                        <span>Expired code</span>
                    }
                </div>
                <div class="login-form-verify">
                    <button class="--button _primary @(IsLoading? "_loading --disable" : "")" @onclick="OnVerifyClicked">
                        <span>Verify</span>
                        <AngryMonkey.Cloud.Components.Icons.LoadingButton view="@(IsLoading ? true : false)" />
                    </button>
                </div>
            </div>

        }
        else if (State == ProcessState.PendingRegisteration)
        {
            <div class="login-form">
                <div class="login-form-Verification">
                    <span>Email is verified => Create user</span>
                </div>

                <div class="login-form-error @(EmptyInput? "_wrong" : "")">
                    @if (EmptyInput)
                    {
                        <span>You have an input empty!</span>
                    }
                </div>
                <div class="login-form-register">
                    <div class="--input">
                        <input type="text" id="firstName" class=" @(FirstName!=""? "active": "")" @bind-value="FirstName" @bind-value:event="oninput" spellcheck="false" />
                        <label for="firstName">First Name</label>
                    </div>
                    <div class="--input">
                        <input type="text" id="lastName" class=" @(LastName!=""? "active": "")" @bind-value="LastName" @bind-value:event="oninput" spellcheck="false" />
                        <label for="lastName">Last Name</label>
                    </div>
                    <div class="--input">
                        <input type="text" id="displayName" class=" @(DisplayName!=""? "active": "")" @bind-value="DisplayName" @bind-value:event="oninput" spellcheck="false" />
                        <label for="displayName">Display Name</label>
                    </div>
                </div>

                <div class="login-form-finish">
                    <button class="--button _primary @(IsLoading? "_loading --disable" : "")" @onclick="OnRegisterClicked">
                        <span>Register</span>
                        <AngryMonkey.Cloud.Components.Icons.LoadingButton view="@(IsLoading ? true : false)" />
                    </button>
                </div>
            </div>

        }
    </div>

    <div class="amc-cloudlogin-footer">
        <AngryMonkey.Cloud.Login.Components.ProviderIcons />
    </div>
</div>