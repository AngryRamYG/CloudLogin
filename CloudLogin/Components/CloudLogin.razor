@namespace AngryMonkey.Cloud.Login
@using static Microsoft.AspNetCore.Components.Forms.InputCheckbox;
@inject Microsoft.Extensions.DependencyInjection.CloudLoginService cloudLogin
@inject NavigationManager NavigationManager

<div draggable class="amc-cloudlogin">
    @if (State == ProcessEvent.PendingSignIn)
    {
        @if (InputType == InputFormat.Other || InputType == InputFormat.Email)
        {
            <span>Email</span>
        }
        @if (InputType == InputFormat.Other)
        {
            <span> or </span>
        }
        @if (InputType == InputFormat.Other || InputType == InputFormat.PhoneNumber)
        {
            <span>phone number</span>
        }

        <br />

        <input type="text" @bind-value="Value" @bind-value:event="oninput" />

        <br />

        @if (InputType != InputFormat.Other)
        {
            <button @onclick="OnNextClicked">Next</button>
        }
    }

    else if (State == ProcessEvent.PendingLoading)
    {
        <p>retrieving...</p>
    }
    else if (State == ProcessEvent.PendingCheckNumber)
    {
        @PhoneNumber

        <button @onclick="OnBackClicked">Back</button>
    }
    else if (State == ProcessEvent.PendingProviders)
    {
        <div>This Email was not found: </div>
        @Value
        <div>Please register below.</div>
        @foreach (Provider provider in Providers)
        {
            <button @onclick="() => OnProviderClickedAsync(provider)">@provider.Name</button>
        }

        <input type="checkbox" id="keepme" style="appearance: auto;" @bind-value="KeepMeSignedIn">
        <label for="keepme"> Keep me signed in </label>
        <button @onclick="OnBackClicked">Back</button>
    }
    else if (State == ProcessEvent.PendingVerification)
    {
        @DebugCodeShow
        //DEBUG ONLY
        <input type="text" @bind-value="VerificationValue" @bind-value:event="oninput" />
        <button @onclick="OnVerifyClicked">Verify</button>


        if (WrongCode)
        {
            <div>
                Wrong code
                <button @onclick="OnBackClicked">Back</button>
            </div>
        }
        if (ExpiredCode)
        {
            <div>
                Expired code
                <button @onclick="OnNewCodeClicked">New Code</button>
            </div>
        }

    }
    else if (State == ProcessEvent.PendingRegisteration)
    {
        <div>@Value is verified => Create user</div>

        <div>First Name: <input type="text" @bind-value="FirstName" @bind-value:event="oninput" /></div>
        <div>Last Name: <input type="text" @bind-value="LastName" @bind-value:event="oninput" /></div>
        <div>Display Name: <input type="text" @bind-value="DisplayName" @bind-value:event="oninput" /></div>

        <button @onclick="OnRegisterClicked">Register</button>
        if (EmptyInput)
        {
            <div>You have an input empty!</div>
        }
    }
    else if (State == ProcessEvent.PendingAuthorization)
    {
        <h2><button @onclick="OnBackClicked">Back</button> @Value</h2>

        @foreach (Provider provider in Providers)
        {
            @*<a href="@provider.LoginUrl">@provider.Name</a>*@
            <button @onclick="() => OnProviderClickedAsync(provider)">@provider.Name</button>
        }

        <input type="checkbox" id="keepme" style="appearance: auto;" @bind-value="KeepMeSignedIn">
        <label for="keepme"> Keep me signed in </label>
    }
</div>